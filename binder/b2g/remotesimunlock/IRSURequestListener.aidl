/* (c) 2020 KAI OS TECHNOLOGIES (HONG KONG) LIMITED All rights reserved. This
 * file or any portion thereof may not be reproduced or used in any manner
 * whatsoever without the express written permission of KAI OS TECHNOLOGIES
 * (HONG KONG) LIMITED. KaiOS is the trademark of KAI OS TECHNOLOGIES (HONG
 * KONG) LIMITED or its affiliate company and may be registered in some
 * jurisdictions. All other trademarks are the property of their respective
 * owners.
 */

package b2g.remotesimunlock;

oneway interface IRSURequestListener {
    /**
     * ResponseCode types.
     */
    /**
     * Sucess.
     */
    const int RSU_RESP_SUCCESS = 0;

    /**
     * Failure.
     */
    const int RSU_RESP_FAILURE = 1;

    /**
     * Expired. Special error type for unlockTimer.
     * Start timer only can be invoked one time in a power cycle.
     */
    const int RSU_RESP_TIMER_EXPIRED = 2;

    /**
     * To notify the result of updateBlob.
     *
     * @param token
     *   The index number in callback list.
     * @param responseCode
     *   RSU_RESP_SUCCESS
     *   RSU_RESP_FAILURE
     * @param responseData
     *   The response data of lock/unlock operation.
     */
    void onUpdateBlob(in int token, in int responseCode, in byte[] responseData);

    /**
     * To notify the result of querySharedKey.
     *
     * @param token
     *   The index number in callback list.
     * @param responseCode
     *   RSU_RESP_SUCCESS
     *   RSU_RESP_FAILURE
     * @param encryptedKey
     *   The response key generated by modem.
     */
    void onQuerySharedKey(in int token, in int responseCode, in byte[] encryptedKey);

    /**
     * To notify the result of generateHMAC.
     *
     * @param token
     *   The index number in callback list.
     * @param responseCode
     *   RSU_RESP_SUCCESS
     *   RSU_RESP_FAILURE
     * @param hmac
     *   The hmac data generated by modem.
     */
    void onGenerateHMAC(in int token, in int responseCode, in byte[] hmac);

    /**
     * To notify the result of queryVersion.
     *
     * @param token
     *   The index number in callback list.
     * @param responseCode
     *   RSU_RESP_SUCCESS
     *   RSU_RESP_FAILURE
     * @param majorVersion
     *   The highest major version of blob.
     * @param minorVersion
     *   The highest minor version of blob.
     */
    void onQueryVersion(in int token, in int responseCode, in int majorVersion, in int minorVersion);

    /**
     * To notify the result of querySimlockStatusCode.
     *
     * @param token
     *   The index number in callback list.
     * @param responseCode
     *   RSU_RESP_SUCCESS
     *   RSU_RESP_FAILURE
     * @param lockStatusCode
     *   The current lock status.
     * @param unlockTime
     *   The remaining time of temporary unlock.
     */
    void onQuerySimlockStatusCode(in int token, in int responseCode, in int lockStatusCode, in long unlockTime);

    /**
     * To notify the result of generateRequestBlob.
     *
     * @param token
     *   The index number in callback list.
     * @param responseCode
     *   RSU_RESP_SUCCESS
     *   RSU_RESP_FAILURE
     * @param requestData
     *   The request data generated by modem.
     */
    void onGenerateRequestBlob(in int token, in int responseCode, in byte[] requestData);

    /**
     * To notify the result of unlockTimer.
     *
     * @param token
     *   The index number in callback list.
     * @param responseCode
     *   RSU_RESP_SUCCESS
     *   RSU_RESP_FAILURE
     *   RSU_RESP_TIMER_EXPIRED
     * @param requestData
     *   The remaining time of allowing temporary connectivity.
     */
    void onUnlockTimer(in int token, in int responseCode, in int timerValue);
}

